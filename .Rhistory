library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(3433)
## grep the predictors starting with 'IL'
IL_str <- grep("^IL", colnames(training), value = TRUE)
## make a subset of these predictors
predictors_IL <- predictors[, IL_str]
df <- data.frame(diagnosis, predictors_IL)
inTrain = createDataPartition(df$diagnosis, p = 3/4)[[1]]
training = df[inTrain, ]
testing = df[-inTrain, ]
## train the data using the first method
modelFit <- train(diagnosis ~ ., method = "glm", data = training)
set.seed(3433)
IL_str <- grep("^IL", colnames(training), value = TRUE)
predictors_IL <- predictors[, IL_str]
df <- data.frame(diagnosis, predictors_IL)
inTrain = createDataPartition(df$diagnosis, p = 3/4)[[1]]
training = df[inTrain, ]
> testing = df[-inTrain, ]
training = df[inTrain, ]
testing = df[-inTrain, ]
modelFit <- train(diagnosis ~ ., method = "glm", data = training)
install.packages("e1071")
modelFit <- train(diagnosis ~ ., method = "glm", data = training)
preProc <- preProcess(training[,IL_str], method="pca", thresh=0.8)
pred1 <- predict(modelFit, newdata=testing)
C1 <- confusionMatrix(pred1, testing$diagnosis)
print(C1)
A1 <- C1$overall[1]
A1
modelFit <- train(training$diagnosis ~ ., method = "glm", preProcess = "pca",
data = training, trControl = trainControl(preProcOptions = list(thresh = 0.8)))
modelFit <- train(training$diagnosis ~ ., method = "glm", preProcess = "pca",
data = training, trControl = trainControl(preProcOptions = list(thresh = 0.8)))
pred2 <- predict(modelFit, newdata=testing)
C2 <- confusionMatrix(pred2, testing$diagnosis)
print(C2)
predTest <- predict(modelFit_GBM,testPC)
confusionMatrix(predTest,testData$classe)
library(caret)
testData$classe
library("AppliedPredictiveModeling")
library("caret")
set.seed(1701)
#Reading data
Data0 <- read.csv("data_proj/pml-training.csv")
#Create Train and Test samples
inTrain <- createDataPartition(y=Data0$classe, p=0.75, list=FALSE)
trainData0 <- Data0[inTrain,]
testData0 <- Data0[-inTrain,]
#Pre-processing Train Data
flgOK <- grep("^magnet|^accel|^gyros|^roll|^pitch|^yaw|^total", colnames(trainData0), value=T)
flgClasse <- grep("^classe", colnames(trainData0), value=T)
trainData <- data.frame(classe=trainData0[,flgClasse], trainData0[,flgOK]) # 52 variables
flgBelt <- grep("belt", colnames(trainData), value=T)
flgArm <- grep("_arm", colnames(trainData), value=T)
flgForearm <- grep("forearm", colnames(trainData), value=T)
flgDum <- grep("dumbbell", colnames(trainData), value=T)
#Data for each sensor
trainData_B <- data.frame(classe=trainData[,1],trainData[,flgBelt])
trainData_A <- data.frame(classe=trainData[,1],trainData[,flgArm])
trainData_F <- data.frame(classe=trainData[,1],trainData[,flgForearm])
trainData_D <- data.frame(classe=trainData[,1],trainData[,flgDum])
getwd()
library("AppliedPredictiveModeling")
library("caret")
set.seed(1701)
#Reading data
Data0 <- read.csv("data_proj/pml-training.csv")
#Create Train and Test samples
inTrain <- createDataPartition(y=Data0$classe, p=0.75, list=FALSE)
trainData0 <- Data0[inTrain,]
testData0 <- Data0[-inTrain,]
#Pre-processing Train Data
flgOK <- grep("^magnet|^accel|^gyros|^roll|^pitch|^yaw|^total", colnames(trainData0), value=T)
flgClasse <- grep("^classe", colnames(trainData0), value=T)
trainData <- data.frame(classe=trainData0[,flgClasse], trainData0[,flgOK]) # 52 variables
flgBelt <- grep("belt", colnames(trainData), value=T)
flgArm <- grep("_arm", colnames(trainData), value=T)
flgForearm <- grep("forearm", colnames(trainData), value=T)
flgDum <- grep("dumbbell", colnames(trainData), value=T)
#Data for each sensor
trainData_B <- data.frame(classe=trainData[,1],trainData[,flgBelt])
trainData_A <- data.frame(classe=trainData[,1],trainData[,flgArm])
trainData_F <- data.frame(classe=trainData[,1],trainData[,flgForearm])
trainData_D <- data.frame(classe=trainData[,1],trainData[,flgDum])
getwd()
getwd()
setwd("/Users/bedregal/coursera_DatSci/coursera_08_MachineLearning")
library("AppliedPredictiveModeling")
library("caret")
set.seed(1701)
#Reading data
Data0 <- read.csv("data_proj/pml-training.csv")
#Create Train and Test samples
inTrain <- createDataPartition(y=Data0$classe, p=0.75, list=FALSE)
trainData0 <- Data0[inTrain,]
testData0 <- Data0[-inTrain,]
#Pre-processing Train Data
flgOK <- grep("^magnet|^accel|^gyros|^roll|^pitch|^yaw|^total", colnames(trainData0), value=T)
flgClasse <- grep("^classe", colnames(trainData0), value=T)
trainData <- data.frame(classe=trainData0[,flgClasse], trainData0[,flgOK]) # 52 variables
flgBelt <- grep("belt", colnames(trainData), value=T)
flgArm <- grep("_arm", colnames(trainData), value=T)
flgForearm <- grep("forearm", colnames(trainData), value=T)
flgDum <- grep("dumbbell", colnames(trainData), value=T)
#Data for each sensor
trainData_B <- data.frame(classe=trainData[,1],trainData[,flgBelt])
trainData_A <- data.frame(classe=trainData[,1],trainData[,flgArm])
trainData_F <- data.frame(classe=trainData[,1],trainData[,flgForearm])
trainData_D <- data.frame(classe=trainData[,1],trainData[,flgDum])
pcA <-preProcess(trainData_A[,2:14], method="pca", thresh=0.9)
pcPred_A <- predict(pcA,trainData_A[,2:14])
summary(pcPred_A)
pcB <-preProcess(trainData_B[,2:14], method="pca", thresh=0.9)
pcPred_B <- predict(pcB,trainData_B[,2:14])
summary(pcPred_B)
pcD <-preProcess(trainData_D[,2:14], method="pca", thresh=0.9)
pcPred_D <- predict(pcD,trainData_D[,2:14])
summary(pcPred_D)
pcF <-preProcess(trainData_F[,2:14], method="pca", thresh=0.9)
pcPred_F <- predict(pcF,trainData_F[,2:14])
summary(pcPred_F)
trainPC <- data.frame(pcPred_A, pcPred_B, pcPred_D, pcPred_F)
# Model fit
#modelFit <- train(trainData$classe ~., method="glm", data=trainPC)
modelFit_GBM <- train(trainData$classe ~., method="gbm", data=trainPC)
flgOK <- grep("^magnet|^accel|^gyros|^roll|^pitch|^yaw|^total", colnames(testData0), value=T)
flgClasse <- grep("^classe", colnames(testData0), value=T)
testData <- data.frame(classe=testData0[,flgClasse],testData0[,flgOK]) # 52 variables
flgBelt <- grep("belt", colnames(testData), value=T)
flgArm <- grep("_arm", colnames(testData), value=T)
flgForearm <- grep("forearm", colnames(testData), value=T)
flgDum <- grep("dumbbell", colnames(testData), value=T)
#Test Data for each sensor
testData_B <- data.frame(classe=testData[,flgClasse],testData[,flgBelt])
testData_A <- data.frame(classe=testData[,flgClasse],testData[,flgArm])
testData_F <- data.frame(classe=testData[,flgClasse],testData[,flgForearm])
testData_D <- data.frame(classe=testData[,flgClasse],testData[,flgDum])
#Using same PCA than in train data
test_pcPred_A <- predict(pcA,testData_A[,2:14])
test_pcPred_B <- predict(pcB,testData_B[,2:14])
test_pcPred_D <- predict(pcD,testData_D[,2:14])
test_pcPred_F <- predict(pcF,testData_F[,2:14])
testPC <- data.frame(test_pcPred_A, test_pcPred_B, test_pcPred_D, test_pcPred_F)
predTest <- predict(modelFit_GBM,testPC)
confusionMatrix(predTest,testData$classe)
getwd()
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
head(segmentationOriginal)
segmentationOriginal$CART
segmentationOriginal$cart
head(segmentationOriginal)
source('~/coursera_DatSci/coursera_08_MachineLearning/quiz03.R')
source('~/coursera_DatSci/coursera_08_MachineLearning/quiz03.R')
source('~/coursera_DatSci/coursera_08_MachineLearning/quiz03.R')
download.packge("rattle")
install.packges("rattle")
install.packages("rattle")
source('~/coursera_DatSci/coursera_08_MachineLearning/quiz03.R')
rattle()
rattle()
install.packages("rattle")
install.packages("rattle")
rattle()
source('~/coursera_DatSci/coursera_08_MachineLearning/quiz03.R')
rattle()
source('~/coursera_DatSci/coursera_08_MachineLearning/quiz03.R')
trainData$Class
set.seed(125)
model <- train(trainData$Class ~., method="rpart", data=trainData)
library(rattle)
fancyRpartPlot(model$finalModel)
source('~/coursera_DatSci/coursera_08_MachineLearning/quiz03.R')
plot(model$finalModel, uniform=T)
text(model$finalModel, use.n=T, all0T, cex0.8)
plot(model$finalModel, uniform=T)
text(model$finalModel, use.n=T, all=T, cex0.8)
plot(model$finalModel, uniform=T)
text(model$finalModel, use.n=T, all=T, cex=.8)
source('~/coursera_DatSci/coursera_08_MachineLearning/quiz03.R')
library(pgmm)
data(olive)
olive = olive[,-1]
library(pgmm)
install.packages("pgmm")
library(pgmm)
library(pgmm)
data(olive)
head(olive)
tail(olive)
source('~/coursera_DatSci/coursera_08_MachineLearning/quiz03.R')
model$finalModel
source('~/coursera_DatSci/coursera_08_MachineLearning/quiz03.R')
predFinal
source('~/coursera_DatSci/coursera_08_MachineLearning/quiz03.R')
predFinal
source('~/coursera_DatSci/coursera_08_MachineLearning/quiz03.R')
head(olive, n=20)
source('~/coursera_DatSci/coursera_08_MachineLearning/quiz03.R')
install.packages("ElemStatLearn")
source('~/coursera_DatSci/coursera_08_MachineLearning/quiz03.R')
source('~/coursera_DatSci/coursera_08_MachineLearning/quiz03.R')
head(trainSA)
source('~/coursera_DatSci/coursera_08_MachineLearning/quiz03.R')
source('~/coursera_DatSci/coursera_08_MachineLearning/quiz03.R')
missClass(values,prediction)
prediction <- predict(model,trainSA)
values <- trainSA$chd
missClass(values,prediction)
source('~/coursera_DatSci/coursera_08_MachineLearning/quiz03.R')
missClass(values,prediction)
source('~/coursera_DatSci/coursera_08_MachineLearning/quiz03.R')
missClass(values,prediction)
source('~/coursera_DatSci/coursera_08_MachineLearning/quiz03.R')
source('~/coursera_DatSci/coursera_08_MachineLearning/quiz03.R')
head(vowel.train)
?varlmp()
?varImp()
source('~/coursera_DatSci/coursera_08_MachineLearning/quiz03.R')
source('~/coursera_DatSci/coursera_08_MachineLearning/quiz03.R')
varImp(model)
source('~/coursera_DatSci/coursera_08_MachineLearning/quiz03.R')
source('~/coursera_DatSci/coursera_08_MachineLearning/quiz4/quiz04.R')
warnings()
confusionMatrix(predBOTH, factor(vowel.test$y))
confusionMatrix(predGBM, factor(vowel.test$y))
confusionMatrix(predRF, factor(vowel.test$y))
source('~/coursera_DatSci/coursera_08_MachineLearning/quiz4/quiz04.R')
head(training)
source('~/coursera_DatSci/coursera_08_MachineLearning/quiz4/quiz04.R')
confusionMatrix(predALL,adData$diagnosis)
confusionMatrix(predRF,adData$diagnosis)
adData$diagnosis
source('~/coursera_DatSci/coursera_08_MachineLearning/quiz4/quiz04.R')
source('~/coursera_DatSci/coursera_08_MachineLearning/quiz4/quiz04.R')
cmRF
cmGBM
cmLDA
combALL <- data.frame(predRF,predGBM, predLDA
modALL <- train(factor(testing$diagnosis) ~., method="rf", data=combALL)
predALL <- predict(modALL, combALL)
cmALL <- confusionMatrix(predALL,factor(testing$diagnosis))
combALL <- data.frame(predRF,predGBM, predLDA)
modALL <- train(factor(testing$diagnosis) ~., method="rf", data=combALL)
predALL <- predict(modALL, combALL)
cmALL <- confusionMatrix(predALL,factor(testing$diagnosis))
cmALL
?plot.net()
?plot.enet()
?plot.enet
??plot.enet
source('~/coursera_DatSci/coursera_08_MachineLearning/quiz4/quiz04.R')
head(training)
source('~/coursera_DatSci/coursera_08_MachineLearning/quiz4/quiz04.R')
source('~/coursera_DatSci/coursera_08_MachineLearning/quiz4/quiz04.R')
source('~/coursera_DatSci/coursera_08_MachineLearning/quiz4/quiz04.R')
source('~/coursera_DatSci/coursera_08_MachineLearning/quiz4/quiz04.R')
source('~/coursera_DatSci/coursera_08_MachineLearning/quiz4/quiz04.R')
source('~/coursera_DatSci/coursera_08_MachineLearning/quiz4/quiz04.R')
pred
source('~/coursera_DatSci/coursera_08_MachineLearning/quiz4/quiz04.R')
source('~/coursera_DatSci/coursera_08_MachineLearning/quiz4/quiz04.R')
source('~/coursera_DatSci/coursera_08_MachineLearning/quiz4/quiz04.R')
pred
source('~/coursera_DatSci/coursera_08_MachineLearning/quiz4/quiz04.R')
summary(pred)
head(training)
head(as.matrix(training))
tail(as.matrix(training))
tail(as.matrix(training[,47]))
tail(as.matrix(training[47,]))
tail(as.matrix(training[35,]))
?lars()
source('~/coursera_DatSci/coursera_08_MachineLearning/quiz4/quiz04.R')
source('~/coursera_DatSci/coursera_08_MachineLearning/quiz4/quiz04.R')
?bats()
bats()
?forecast()
?forecast
library(forecast)
install.package("forecast")
install.packages("forecast")
library(forecast)
?forecast
source('~/coursera_DatSci/coursera_08_MachineLearning/quiz4/quiz04.R')
source('~/coursera_DatSci/coursera_08_MachineLearning/quiz4/quiz04.R')
source('~/coursera_DatSci/coursera_08_MachineLearning/quiz4/quiz04.R')
install.packages("lubridate")
source('~/coursera_DatSci/coursera_08_MachineLearning/quiz4/quiz04.R')
getwd()
source('~/coursera_DatSci/coursera_08_MachineLearning/quiz4/quiz04.R')
install.packages("quantmod")
source('~/coursera_DatSci/coursera_08_MachineLearning/quiz4/quiz04.R')
source('~/coursera_DatSci/coursera_08_MachineLearning/quiz4/quiz04.R')
source('~/coursera_DatSci/coursera_08_MachineLearning/quiz4/quiz04.R')
result
sum(result)/l * 100
install.packages("e1071")
install.packages("e1071")
source('~/coursera_DatSci/coursera_08_MachineLearning/quiz4/quiz04.R')
install.packages("e1071")
install.packages("e1071")
install.packages("e1071")
source('~/coursera_DatSci/coursera_08_MachineLearning/quiz4/quiz04.R')
accuracy(prediction, testing$CompressiveStrength)
?accuracy
?accuracy()
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
# Set the seed to 325 and fit a support vector machine using the e1071 package
# to predict Compressive Strength using the default settings. Predict on the
# testing set. What is the RMSE?
set.seed(325)
library(e1071)
library(caret)
fit <- train(CompressiveStrength ~ ., data = training, method = "svmRadial")
accuracy(prediction, testing$CompressiveStrength)
source('~/coursera_DatSci/coursera_08_MachineLearning/quiz4/quiz04.R')
?accuracy()
library(forecast)
source('~/coursera_DatSci/coursera_08_MachineLearning/quiz4/quiz04.R')
source('~/coursera_DatSci/coursera_08_MachineLearning/quiz4/quiz04.R')
prediction
accuracy(prediction, testing$CompressiveStrength)
?train()
name(getModelInfo())
train(getModelInfo())
names(getModelInfo())
names(getModels())
names(Models())
install.packages("devtools")
library(devtools)
install_github('slidify', 'ramnathv')
install_github('slidifyLibraries', 'ramnathv')
library(slidify)
generic.function(colSums)
methods(colSums)
methods(lm)
methods(predict)
methods(dgamma)
methods(mean)
library(xml)
install.packages("xml")
install.packages("XML")
library(XML)
doc <- xmlTreeParse("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml", useInternal=T)
library(XML)
doc <- xmlTreeParse("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml", useInternal=T)
?xmlTreeParse
doc <- xmlTreeParse("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml", useInternal=T)
doc <- xmlTreeParse('https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml', useInternal=T)
doc <- xmlTreeParse('https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml')
doc <- xmlTreeParse("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml")
library(rCurl)
install.packeges("rCurl")
install.packages("rCurl")
install.packages("RCurl")
library(RCurl)
library(XML)
xdata <-getURL("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml")
doc <- xmlTreeParse(xdata, useInternal=T)
doc <- xmlParse(xdata)
table(doc)
library(XML)
library(RCurl)
xdata <- getURL("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml")
doc <- xmlParse(xdata)
doc
doc <- xmlTreeParse("http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml")
table(doc)
rootNode<-xmlRoot(doc)
xmlName(rootNode)
names(rootNode)
rootNode[[1]]
rootNode[[1]][[1]]
xpathSApply(rootNode,"//zipcode",xmlValue)
?xpathSApply
xpathSApply(rootNode,"//li[@class='zipcode']",xmlValue)
zips<-xpathSApply(rootNode,"//li[@class='zipcode']",xmlValue)
zips
zips<-xpathSApply(doc,"//li[@class='zipcode']",xmlValue)
xpathSApply(doc,"//zipcode",xmlValue)
xpathSApply(rootNode,"//zipcode",xmlValue)
library(XML)
doc <- xmlTreeParse("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml")
doc <- xmlTreeParse("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml",useIntern=T)
library(XML)
fileURL<-"https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
fileURL2 <- sub('https', 'http', fileURL)
doc <- xmlTreeParse(fileURL2, useInternal = TRUE)
class(doc)
rootName<-xmlRoot(doc)
rootName
xmlName(rootName)
names(rootName)
rootName[[1]][[1]][[1]]
rootName[[1]][[1]][[2]]
xpathSApply(rootName[[1]][[1]],"//zipcode",xmlValue)
zips<-xpathSApply(rootName[[1]][[1]],"//zipcode",xmlValue)
flg<-zips=="21231"
table(flg)
DT<-fread("data_q1.csv")
?fread
install.packages("fread")
?data.table
install.packages("data.table")
DT<-fread("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv")
?fread
??fread
DT<-fread("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv")
library(data.table)
DT<-fread("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv")
DT<-fread("data_q1.csv",sep",")
DT<-fread("data_q1.csv",sep=",")
DT<-fread("data_q1.csv")
DT<-fread("http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv")
table(DT)
DT$pwgtp15
system.time(mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15))
system.time(mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15))
system.time{mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15)}
system.time({mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15)})
system.time(mean(DT[DT$SEX==1,]$pwgtp15))
system.time(tapply(DT$pwgtp15,DT$SEX,mean))
system.time(DT[,mean(pwgtp15),by=SEX])
system.time(mean(DT$pwgtp15,by=DT$SEX))
?system.time
system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))
system.time(rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2])
system.time({rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2]})
mean(DT$pwgtp15,by=DT$SEX)
x<-mean(DT$pwgtp15,by=DT$SEX)
x
DT$SEX
x<-mean(DT$pwgtp15,by=DT$SEX)
table(x)
sapply(split(DT$pwgtp15,DT$SEX),mean)
mean(DT$pwgtp15,by=DT$SEX)
mean(DT$pwgtp15)
mean(DT$pwgtp15,by=DT$SEX)
?mean
mean(DT$pwgtp15,by=DT$SEX==1)
mean(DT$pwgtp15,by=DT$SEX)
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
> download.file(fileUrl, destfile="./data/microdata.csv", method="curl")
> microData <- read.table("./data/microdata.csv", sep=",", header=TRUE)
> microData$FES
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
> download.file(fileUrl, destfile="./microdata.csv", method="curl")
> microData <- read.table("./microdata.csv", sep=",", header=TRUE)
> microData$FES
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
> download.file(fileUrl, destfile="./microdata.csv", method="curl")
> microData <- read.table("./microdata.csv", sep=",", header=TRUE)
> microData$FES
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
download.file(fileUrl, destfile="./microdata.csv", method="curl")
microData <- read.table("./microdata.csv", sep=",", header=TRUE)
microData$FES
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv"
download.file(fileUrl, destfile="./data/microdata3.csv", method="curl")
DT <- fread("./microdata3.csv")
file.info("./microdata3.csv")$size
system.time(DT[,mean(pwgtp15),by=SEX])
system.time(mean(DT[DT$SEX==1,]$pwgtp15))+system.time(mean(DT[DT$SEX==2,]$pwgtp15))
system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))
system.time(mean(DT$pwgtp15,by=DT$SEX))
system.time(tapply(DT$pwgtp15,DT$SEX,mean))
system.time(rowMeans(DT)[DT$SEX==1])+system.time(rowMeans(DT)[DT$SEX==2])
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv"
download.file(fileUrl, destfile="./data/microdata3.csv", method="curl")
DT <- fread("./microdata3.csv")
file.info("./microdata3.csv")$size
system.time(DT[,mean(pwgtp15),by=SEX])
system.time(mean(DT[DT$SEX==1,]$pwgtp15))+system.time(mean(DT[DT$SEX==2,]$pwgtp15))
system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))
system.time(mean(DT$pwgtp15,by=DT$SEX))
system.time(tapply(DT$pwgtp15,DT$SEX,mean))
system.time({rowMeans(DT)[DT$SEX==1])+system.time(rowMeans(DT)[DT$SEX==2]})
sistem.time(DT[,mean(pwgtp15),by=SEX])
system.time(DT[,mean(pwgtp15),by=SEX])
install.packages("microbenchmark")
microbenchmark(DT[,mean(pwgtp15),by=SEX], mean(DT$pwgtp15,by=DT$SEX), sapply(split(DT$pwgtp15,DT$SEX),mean))
library(microbenchmark)
microbenchmark(DT[,mean(pwgtp15),by=SEX], mean(DT$pwgtp15,by=DT$SEX), sapply(split(DT$pwgtp15,DT$SEX),mean))
library(caret)
?gbm
install.packages("xtable")
getwd()
setwd("../coursera_05_ReproRes/proj01/")
getwd()
?is.complete()
?as.complete()
?complete()
?comlete.cases
?complete.cases
?sum
?tapply
